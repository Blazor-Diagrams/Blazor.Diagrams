let boundListener = {}, isObservingResize = !1; const mo = new MutationObserver((() => { for (const e in boundListener) { const n = boundListener[e], t = n.lastBounds, o = n.elem.getBoundingClientRect(); t.left === o.left && t.top === o.top && t.width === o.width && t.height === o.height || updateBounds(n) } })), ro = new ResizeObserver((e => { for (const n of e) { let e = Array.from(n.target.attributes).find((e => e.name.startsWith("_bl"))).name.substring(4), t = boundListener[e]; t && updateBounds(t) } })); export function getBoundingClientRect(e) { return e.getBoundingClientRect() } function updateBounds(e) { e.lastBounds = e.elem.getBoundingClientRect(), e.ref.invokeMethodAsync("OnResize", e.lastBounds) } export function observe(e, n, t) { !1 === isObservingResize && (mo.observe(document.body, { childList: !0, subtree: !0 }), window.addEventListener("scroll", (() => { for (t in boundListener) { updateBounds(boundListener[t]) } })), isObservingResize = !0), e && (ro.observe(e), boundListener[t] = { elem: e, ref: n, lastBounds: e.getBoundingClientRect() }) } export function unobserve(e, n) { e && ro.unobserve(e), delete boundListener[n] }