let boundListener={},isObservingResize=!1;const mo=new MutationObserver(()=>{for(const id in boundListener){const canvas=boundListener[id],lastBounds=canvas.lastBounds,bounds=canvas.elem.getBoundingClientRect();lastBounds.left!==bounds.left||lastBounds.top!==bounds.top||lastBounds.width!==bounds.width||lastBounds.height!==bounds.height&&updateBounds(canvas)}}}),ro=new ResizeObserver(entries=>{for(const entry of entries){let id=Array.from(entry.target.attributes).find(e=>"name"===e.name.substring(0,4)).name.substring(4),element=boundListener[id];element&&updateBounds(element)}});export function getBoundingClientRect(el){return el.getBoundingClientRect()}function updateBounds(canvas){canvas.lastBounds=canvas.elem.getBoundingClientRect(),canvas.ref.invokeMethodAsync("OnResize",canvas.lastBounds)}export function observe(element,ref,id){if(!1===isObservingResize&&(mo.observe(document.body,{childList:!0,subtree:!0}),window.addEventListener("scroll",()=>{for(id in boundListener){const canvas=boundListener[id];updateBounds(canvas)}}),isObservingResize=!0),element){ro.observe(element);const lastBounds=element.getBoundingClientRect();boundListener[id]={elem:element,ref:ref,lastBounds}}export function unobserve(element,id){element&&ro.unobserve(element),delete boundListener[id]}
